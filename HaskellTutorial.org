#+TITLE: Haskell-Style Parsing and Intepretation

* Introduction

Haskell is a language full of embedded domain-specific languages. A
"domain-specific language", or DSL, is a language specialized for a
particular purpose, or "domain". The benefit of a DSL is that it can
offer programming primitives directly relevant to the domain, while
guarding users from foul domain behaviour.

This document presents a couple embedded Haskell DSLs for the
parsing and interpretation of simple regular, context-free, and
context-sensitive languages. The distinction between these language
classes will be made clear along the way.

Not all programming langugages allow the "embedding" of other,
domain-specific languages. This demands that the designer of a
language library can define new, and override existing operators
and control-flow structures.

For instance, C++, C#, and Python, all allow advanced operator
overloading, but none of them permit to modify the behaviour of
sequencing program statements (in C# and C++, the =;= operator).

Haskell is also a functional programming language; which in this
case means that it comes with quick and (relatively) painless
"glue code" for binding seemingly disparate domain-specific code,
into one cohesive whole, such as the stages of a compiler or
interpreter.

** Audience

The principal target audience for this tutorial are [[http://www.diku.dk/][DIKU]] students,
coming to learn Haskell after having taken an undergraduate course
on Compiler Implementation.

* Regular Expressions

* Context-Free Grammars

* Context-Sensitive Languages

* Interpretation
